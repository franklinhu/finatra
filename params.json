{"name":"Finatra","body":"# Finatra\r\n\r\n### Description\r\nFinatra is a sinatra clone backed by scala/finagle written by [@capotej](http://twitter.com/capotej) and [@twoism](http://twitter.com/twoism)\r\n\r\n\r\n### Features\r\n* The routing DSL you've come to know and love\r\n\r\n* Asynchronous, uses Finagle-HTTP/Netty\r\n\r\n* Multipart file upload/form handling\r\n\r\n* Modular app support\r\n\r\n* A testing helper\r\n\r\n* Built in static file server (note: not designed for huge files(>100mb))\r\n\r\n### Installation\r\nAdd the repo and dependency to your pom.xml (sbt users to the left)\r\n\r\n```xml\r\n<repositories>\r\n  <repository>\r\n    <id>repo.juliocapote.com</id>\r\n    <url>http://repo.juliocapote.com</url>\r\n  </repository>\r\n</repositories>\r\n\r\n<dependencies>\r\n  <dependency>\r\n    <groupId>com.posterous</groupId>\r\n    <artifactId>finatra</artifactId>\r\n    <version>1.6.0</version>\r\n  </dependency>\r\n</dependencies>\r\n```\r\n\r\n### Configuring\r\n\r\nimport the FinatraServer and FinatraApp\r\n\r\n```scala\r\nimport com.posterous.finatra.{FinatraServer, FinatraApp}\r\n```\r\n\r\nregister your apps\r\n\r\n```scala\r\nFinatraServer.register(Example)\r\nFinatraServer.register(MyResource)\r\n```\r\n\r\nstart the server\r\n\r\n```scala\r\nFinatraServer.start() //Defaults: 7070, \"docroot\"\r\n```\r\n\r\n\r\n### Example project\r\nCheck out [finatra-helloworld](http://github.com/capotej/finatra-helloworld) for an example finatra project\r\n\r\n\r\n### API\r\n\r\n```scala\r\npackage com.posterous.finatra\r\n\r\n//You can \"mount\" your resources on a prefix\r\nobject MyResource extends FinatraApp(\"/my\") {\r\n  // responds to /my/lol\r\n  get(\"/lol\") { <h1>lol</h1> }\r\n}\r\n\r\nobject Example extends FinatraApp {\r\n\r\n  // set content type\r\n  get(\"/\") { \r\n    contentType(\"application/html\")\r\n    \"<h1>asd</h1>\"\r\n  } \r\n\r\n  // set the status code\r\n  get(\"/error\") {\r\n    status(500)\r\n    \"error!\"\r\n  }\r\n\r\n  // redirect \r\n  get(\"/redirector\") {\r\n    redirect(\"/gohere\")\r\n  }\r\n  \r\n  // send json\r\n  get(\"/somejson\") {\r\n    toJson(Map(\"foo\" -> \"bar\"))\r\n  }\r\n  \r\n  // setting headers\r\n  get(\"/headertest\") {\r\n    headers(\"foo\",\"bar\")\r\n    \"check heads\"\r\n  }\r\n\r\n  // reading headers\r\n  get(\"/foo\") { \r\n    request.headers \r\n  }\r\n \r\n  // will get param /simple?lol=value\r\n  get(\"/simple\") { \r\n    params(\"lol\") \r\n  }\r\n \r\n  // will get /doit/2004\r\n  get(\"/doit/:year\") { \r\n    params(\"year\") \r\n  }\r\n\r\n  // respond to post\r\n  post(\"/file\") {\r\n    \"file posted\"\r\n  }\r\n\r\n}\r\n```\r\n\r\n### File Uploads\r\n\r\n```scala\r\n\r\nobject UploadExample extends FinatraApp {\r\n\r\n  //Example curl:\r\n  //curl -F myfile=@/home/capotej/images/bad-advice-cat.jpeg http://localhost:7070/\r\n\r\n  //the multiPart method returns MultiPartItem objects, which have some handy methods\r\n  post(\"/upload\") {\r\n    multiPart(\"myfile\").headers \r\n    \r\n    multiPart(\"myfile\").contentType\r\n    \r\n    multiPart(\"myfile\").data\r\n    \r\n    multiPart(\"myfile\").filename\r\n    \r\n    multiPart(\"myfile\").writeToFile(\"/tmp/file.jpg\")\r\n  }\r\n\r\n\r\n  //Form Example\r\n  //curl -F foo=bar http://localhost:7070/formsubmit\r\n\r\n  post(\"/formsubmit\") {\r\n    multiPart(\"foo\").data // \"bar\"\r\n  }\r\n\r\n\r\n```\r\n\r\n\r\n\r\n## Writing tests\r\nFinatra includes FinatraSpec for easy test writing\r\n\r\n```scala\r\nimport com.posterous.finatra.FinatraSpec\r\n\r\nclass IntHandlerSpec extends FinatraSpec {\r\n\r\n  FinatraServer.register(IntHandler)\r\n\r\n  class `GET for a missing key'` {\r\n\r\n    get(\"/int/foo\")\r\n\r\n    @Test def `returns 404` = {\r\n      lastResponse.statusCode.must(be(404))\r\n    }\r\n\r\n  }\r\n\r\n  class `POST for a missing key, creates it with 1'` {\r\n\r\n    post(\"/int/foo\")\r\n    get(\"/int/foo\")\r\n\r\n    @Test def `returns 200` = {\r\n      lastResponse.statusCode.must(be(200))\r\n      lastResponse.content.toString(\"UTF8\").must(be(\"1\"))\r\n    }\r\n\r\n  }\r\n  class `POST for an existing key, with a value of 10'` {\r\n\r\n    post(\"/int/foo2\", List(Tuple2(\"value\", \"10\")):_*)\r\n    get(\"/int/foo2\")\r\n\r\n    @Test def `returns 200` = {\r\n      lastResponse.statusCode.must(be(200))\r\n      lastResponse.content.toString(\"UTF8\").must(be(\"10\"))\r\n    }\r\n\r\n  }\r\n}\r\n```\r\n\r\n## License \r\n\r\nCopyright (C) 2012 Julio Capote\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tagline":"finagle + sinatra","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}